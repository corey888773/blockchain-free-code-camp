{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/**\n * @title FundMe\n * @author Piotr GÄ…siorek\n * @notice This contract allows to fund the contract with a minimum amount of USD\n * @dev The contract has a minimum amount of USD that can be funded\n */\ncontract FundMe {\n    // Type declarations\n    using PriceConverter for uint256;\n\n    // State variables\n    uint256 constant MINIMUM_USD = 1 * 1e18;\n    address private immutable i_owner;\n\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    AggregatorV3Interface private s_priceFeed;\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"this can be done only by the owner\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        // 1e18 = 1_000_000_000_000_000_000 wei\n        require(\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\n            \"Send more ETH!\"\n        );\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function expensive_withdraw() public onlyOwner {\n        for (uint256 i; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        // withdraw\n        // transfer throws, has 2800 gas limit\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // returns bool, has 2800 gas limit\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"send failed!\");\n\n        // most powerful, does not have any limits\n        (bool callSuccess /* bytes memory msgData */, ) = payable(msg.sender)\n            .call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    function withdraw() public onlyOwner {\n        address[] memory funders = s_funders; // gas optimization\n        for (uint256 i; i < funders.length; i++) {\n            address funder = funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSuccess /* bytes memory msgData */, ) = payable(msg.sender)\n            .call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAdressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License: MIT\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (\n            ,\n            /* uint80 roundId */ int256 price /* uint startedAt */ /* uint timeStamp */ /* uint80 answeredInRound */,\n            ,\n            ,\n\n        ) = priceFeed.latestRoundData();\n\n        // 3000.00000000\n        return uint256(price * 1e10); // we want that value to have 18 decimals as well as wei\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethUsdPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethUsdPrice * ethAmount) / 1e18;\n\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}